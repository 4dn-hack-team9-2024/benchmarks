# Example launch : snakemake --cores 1 --config machine=$HOSTNAME -s Snakefile_polychrom 

n_beads_choices = [1000, 4000, 10000, 40000, 80000, 200000, 240000, 320000, 400000, 640000, 1280000, 2560000, 5120000]

modes_compaction = ['constant_density'] #, 'constant_box']

backends = ['hoomd-dpd'] # ['hoomd-no-writing', 'hoomd', 'openmm', 'hoomd-dpd']

gpu_test = expand(
    "output/result.gpu-test.{n_beads}.{machine}.{mode_compaction}.{backend}.txt",
    n_beads=n_beads_choices,
    mode_compaction=modes_compaction,
    machine=config['machine'],
    backend=backends
)

rule all:
    input:
        lambda wildcards: gpu_test

rule test_gpu:
    output:
        file="output/result.{mode}.{n_beads}.{machine}.{mode_compaction}.{backend}.txt",
    benchmark:
        repeat(
            "benchmarks/result.{mode}.{n_beads}.{machine}.{mode_compaction}.{backend}.benchmark",
            3,
        )
    run:
        output_folder = output.file.rstrip(".txt")

        # Run OpenMM-polychrom
        if wildcards.backend=="openmm":
            gpu_number = 3

            if wildcards.mode_compaction=='constant_density':
                shell("""
                python polychrom-openmm-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --output-folder {output_folder} --md-steps 100000 --step-size 1000 --density 0.2 &> {output.file}
                    """)
            else: 
                shell("""
                python polychrom-openmm-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --output-folder {output_folder} --md-steps 100000 --step-size 1000 --box-size 100 &> {output.file}
                    """)

        # Run HOOMD-polychrom
        elif wildcards.backend=="hoomd":
            gpu_number = 2
            if wildcards.mode_compaction=='constant_density':
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --output-folder {output_folder} --md-steps 100000 --step-size 1000 --density 0.2 &> {output.file}
                    """)
            else:
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --output-folder {output_folder} --md-steps 100000 --step-size 1000 --box-size 100 &> {output.file}
                    """)

        # Run HOOMD-polychrom with no storing of the intermediary data
        elif wildcards.backend=="hoomd-no-writing":
            gpu_number = 1
            if wildcards.mode_compaction=='constant_density':
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --md-steps 100000 --step-size 1000 --density 0.2 &> {output.file}
                    """)
            else:
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --md-steps 100000 --step-size 1000 --box-size 100 &> {output.file}
                    """)

        # Run HOOMD-polychrom with no storing of the intermediary data and DPD integrator
        else: #if wildcards.backend=="hoomd-dpd":
            gpu_number = 3
            if wildcards.mode_compaction=='constant_density':
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --md-steps 100000 --step-size 1000 --density 0.2 --integrator dpd &> {output.file}
                    """)
            else:
                shell("""
                python polychrom-hoomd-basic-sim.py --gpu-id {gpu_number} --n-monomers {wildcards.n_beads} --md-steps 100000 --step-size 1000 --box-size 100 --integrator dpd &> {output.file}
                    """)

